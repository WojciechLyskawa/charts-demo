{"version":3,"sources":["charts/pie/visx.tsx","charts/pie/index.tsx","charts/bar/index.tsx","charts/line/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["letters","letterFrequency","slice","browserNames","Object","keys","browserUsage","filter","k","browsers","map","name","label","usage","Number","d","frequency","getBrowserColor","scaleOrdinal","domain","range","getLetterFrequencyColor","l","letter","defaultMargin","top","right","bottom","left","Example","width","height","margin","animate","useState","selectedBrowser","setSelectedBrowser","selectedAlphabetLetter","setSelectedAlphabetLetter","innerWidth","innerHeight","radius","Math","min","centerY","centerX","GradientPinkBlue","id","rx","fill","Group","data","pieValue","outerRadius","innerRadius","cornerRadius","padAngle","pie","AnimatedPie","getKey","arc","onClickDatum","getColor","pieSortValues","donutThickness","textAnchor","x","y","fontSize","fontWeight","pointerEvents","fromLeaveTransition","endAngle","startAngle","PI","opacity","enterUpdateTransition","arcs","path","useTransition","from","enter","update","leave","transitions","props","key","centroid","centroidX","centroidY","hasSpaceForLabel","interpolate","onClick","onTouchStart","g","style","dy","Pie","Grid","container","item","href","target","rel","colorScale","angle","useStyles","makeStyles","a","color","Bar","theme","VictoryTheme","material","domainPadding","barWidth","index","xType","Lines","stroke","parent","border","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gWAqBMA,EAA6BC,IAAgBC,MAAM,EAAG,GACtDC,EAAeC,OAAOC,KAAKC,IAAa,IAAIC,QAChD,SAACC,GAAD,MAAa,SAANA,KAEHC,EAA2BN,EAAaO,KAAI,SAACC,GAAD,MAAW,CAC3DC,MAAOD,EACPE,MAAOC,OAAOR,IAAa,GAAGK,QAI1BE,EAAQ,SAACE,GAAD,OAAqBA,EAAEF,OAC/BG,EAAY,SAACD,GAAD,OAAwBA,EAAEC,WAGtCC,EAAkBC,YAAa,CACnCC,OAAQhB,EACRiB,MAAO,CACL,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,2BAGEC,EAA0BH,YAAa,CAC3CC,OAAQnB,EAAQU,KAAI,SAACY,GAAD,OAAOA,EAAEC,UAC7BH,MAAO,CACL,mBACA,qBACA,qBACA,wBAIEI,EAAgB,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAS/C,SAASC,EAAT,GAKD,IAJZC,EAIW,EAJXA,MACAC,EAGW,EAHXA,OAGW,IAFXC,cAEW,MAFFR,EAEE,MADXS,eACW,WACmCC,mBAAwB,MAD3D,mBACJC,EADI,KACaC,EADb,OAEiDF,mBAE1D,MAJS,mBAEJG,EAFI,KAEoBC,EAFpB,KAMX,GAAIR,EAAQ,GAAI,OAAO,KAEvB,IAAMS,EAAaT,EAAQE,EAAOJ,KAAOI,EAAON,MAC1Cc,EAAcT,EAASC,EAAOP,IAAMO,EAAOL,OAC3Cc,EAASC,KAAKC,IAAIJ,EAAYC,GAAe,EAC7CI,EAAUJ,EAAc,EACxBK,EAAUN,EAAa,EAG7B,OACE,sBAAKT,MAAOA,EAAOC,OAAQA,EAA3B,UACE,cAACe,EAAA,EAAD,CAAkBC,GAAG,sBACrB,sBACEC,GAAI,GACJlB,MAAOA,EACPC,OAAQA,EACRkB,KAAK,8BAEP,eAACC,EAAA,EAAD,CAAOzB,IAAKmB,EAAUZ,EAAOP,IAAKG,KAAMiB,EAAUb,EAAOJ,KAAzD,UACE,cAAC,IAAD,CACEuB,KACEhB,EACI1B,EAASF,QAAO,qBAAGK,QAAsBuB,KACzC1B,EAEN2C,SAAUvC,EACVwC,YAAaZ,EACba,YAAab,EApBE,GAqBfc,aAAc,EACdC,SAAU,KAVZ,SAYG,SAACC,GAAD,OACC,cAACC,EAAD,2BACMD,GADN,IAEExB,QAASA,EACT0B,OAAQ,SAACC,GAAD,OAASA,EAAIT,KAAKvC,OAC1BiD,aAAc,gBAAWjD,EAAX,EAAGuC,KAAQvC,MAAX,OACZqB,GACAG,EACED,GAAmBA,IAAoBvB,EAAQ,KAAOA,IAG1DkD,SAAU,SAACF,GAAD,OAAS3C,EAAgB2C,EAAIT,KAAKvC,cAIlD,cAAC,IAAD,CACEuC,KACEd,EACIrC,EAAQO,QACN,qBAAGgB,SAAwBc,KAE7BrC,EAENoD,SAAUpC,EACV+C,cAAe,kBAAO,GACtBV,YAAaZ,EAASuB,GAVxB,SAYG,SAACP,GAAD,OACC,cAACC,EAAD,2BACMD,GADN,IAEExB,QAASA,EACT0B,OAAQ,qBAAGR,KAAQ5B,QACnBsC,aAAc,gBAAWtC,EAAX,EAAG4B,KAAQ5B,OAAX,OACZU,GACAK,EACED,GAA0BA,IAA2Bd,EACjD,KACAA,IAGRuC,SAAU,gBAAWvC,EAAX,EAAG4B,KAAQ5B,OAAX,OACRF,EAAwBE,aAMjCU,GACC,sBACEgC,WAAW,MACXC,EAAGpC,EAAQ,GACXqC,EAAGpC,EAAS,GACZkB,KAAK,QACLmB,SAAU,GACVC,WAAY,IACZC,cAAc,OAPhB,yCAmBR,IAAMC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,MAAqC,CAE/DC,WAAYD,EAAW9B,KAAKgC,GAAK,EAAIhC,KAAKgC,GAAK,EAC/CF,SAAUA,EAAW9B,KAAKgC,GAAK,EAAIhC,KAAKgC,GAAK,EAC7CC,QAAS,IAELC,EAAwB,SAAC,GAAD,MAAiD,CAC7EH,WAD4B,EAAGA,WAE/BD,SAF4B,EAAeA,SAG3CG,QAAS,IAWX,SAASjB,EAAT,GAO6B,IAN3BzB,EAM0B,EAN1BA,QACA4C,EAK0B,EAL1BA,KACAC,EAI0B,EAJ1BA,KACAnB,EAG0B,EAH1BA,OACAG,EAE0B,EAF1BA,SACAD,EAC0B,EAD1BA,aASA,OAPoBkB,wBAAkDF,EAAM,CAC1EG,KAAM/C,EAAUsC,EAAsBK,EACtCK,MAAOL,EACPM,OAAQN,EACRO,MAAOlD,EAAUsC,EAAsBK,EACvCvE,KAAMsD,GAEDyB,EAAY,SAACC,EAAOzB,EAAR,GAA0B,IAAX0B,EAAU,EAAVA,IAAU,EACXR,EAAKS,SAAS3B,GADH,mBACnC4B,EADmC,KACxBC,EADwB,KAEpCC,EAAmB9B,EAAIY,SAAWZ,EAAIa,YAAc,GAE1D,OACE,8BACE,cAAC,WAASK,KAAV,CAEE/D,EAAG4E,sBACD,CAACN,EAAMZ,WAAYY,EAAMb,WACzB,SAACC,EAAYD,GAAb,OACEM,EAAK,2BACAlB,GADD,IAEFa,aACAD,iBAGNvB,KAAMa,EAASF,GACfgC,QAAS,kBAAM/B,EAAaD,IAC5BiC,aAAc,kBAAMhC,EAAaD,MAElC8B,GACC,cAAC,WAASI,EAAV,CAAYC,MAAO,CAAEpB,QAASU,EAAMV,SAApC,SACE,sBACE1B,KAAK,QACLiB,EAAGsB,EACHrB,EAAGsB,EACHO,GAAG,QACH5B,SAAU,EACVH,WAAW,SACXK,cAAc,OAPhB,SASGX,EAAOC,SA3BR0B,MCjNd,IAmDeW,EAnDH,WACV,OACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,mBACEC,KAAK,sDACLC,OAAO,SACPC,IAAI,aAHN,qBAOA,cAAC,IAAD,CACEC,WAAW,OACXrD,KAAM,CACJ,CAAEe,EAAG,IAAKC,EAAG,KACb,CAAED,EAAG,IAAKC,EAAG,KACb,CAAED,EAAG,IAAKC,EAAG,MAEfb,YAAa,SAGjB,eAAC4C,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,mBACEC,KAAK,4DACLC,OAAO,SACPC,IAAI,aAHN,uBAOA,cAAC,IAAD,CACEpD,KAAM,CAAC,CAAEsD,MAAO,GAAK,CAAEA,MAAO,GAAK,CAAEA,MAAO,IAC5C3E,MAAO,IACPC,OAAQ,IACRuB,YAAa,IACbb,OAAQ,SAGZ,eAACyD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,mBACEC,KAAK,iCACLC,OAAO,SACPC,IAAI,aAHN,kBAOA,cAAC,EAAD,CAAGzE,MAAO,IAAKC,OAAQ,a,oCCvCzB2E,EAAYC,YAAW,CAC3BC,EAAG,CACDC,MAAO,SAgDIC,EA5CH,WACMJ,IAChB,OACE,eAACR,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAcW,MAAOC,IAAaC,SAAUC,cAAe,CAAEhD,EAAG,IAAhE,SACE,cAAC,IAAD,CACEiD,SAAU,gBAAGC,EAAH,EAAGA,MAAH,OAA+B,EAAhBtG,OAAOsG,GAAa,GAC7CrB,MAAO,CACL5C,KAAM,CAAEF,KAAM,YAEhBE,KAAM,CACJ,CAAEe,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,UAKnB,cAAC+B,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,eAAC,IAAD,CAAQiB,MAAM,UAAUvF,MAAO,IAAKC,OAAQ,IAA5C,UACE,cAAC,IAAD,IAEA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CACEoB,KAAM,CACJ,CAAEe,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb0C,MAAM,OACNM,SAAU,c,SCDPG,EA1CD,WACZ,OACE,eAACpB,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAcW,MAAOC,IAAaC,SAAlC,SACE,cAAC,IAAD,CACElB,MAAO,CACL5C,KAAM,CAAEoE,OAAQ,WAChBC,OAAQ,CAAEC,OAAQ,mBAEpBtE,KAAM,CACJ,CAAEe,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,UAKnB,cAAC+B,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,eAAC,IAAD,CAAQiB,MAAM,UAAUvF,MAAO,IAAKC,OAAQ,IAA5C,UACE,cAAC,IAAD,IAEA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CACEoB,KAAM,CACJ,CAAEe,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb0C,MAAM,kB,OC3BHa,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,mBAEE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d62ae549.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\nimport { scaleOrdinal } from '@visx/scale';\nimport { Group } from '@visx/group';\nimport { GradientPinkBlue } from '@visx/gradient';\nimport letterFrequency, {\n  LetterFrequency,\n} from '@visx/mock-data/lib/mocks/letterFrequency';\nimport browserUsage, {\n  BrowserUsage as Browsers,\n} from '@visx/mock-data/lib/mocks/browserUsage';\nimport { animated, useTransition, interpolate } from 'react-spring';\n\n// data and types\ntype BrowserNames = keyof Browsers;\n\ninterface BrowserUsage {\n  label: BrowserNames;\n  usage: number;\n}\n\nconst letters: LetterFrequency[] = letterFrequency.slice(0, 4);\nconst browserNames = Object.keys(browserUsage[0]).filter(\n  (k) => k !== 'date'\n) as BrowserNames[];\nconst browsers: BrowserUsage[] = browserNames.map((name) => ({\n  label: name,\n  usage: Number(browserUsage[0][name]),\n}));\n\n// accessor functions\nconst usage = (d: BrowserUsage) => d.usage;\nconst frequency = (d: LetterFrequency) => d.frequency;\n\n// color scales\nconst getBrowserColor = scaleOrdinal({\n  domain: browserNames,\n  range: [\n    'rgba(255,255,255,0.7)',\n    'rgba(255,255,255,0.6)',\n    'rgba(255,255,255,0.5)',\n    'rgba(255,255,255,0.4)',\n    'rgba(255,255,255,0.3)',\n    'rgba(255,255,255,0.2)',\n    'rgba(255,255,255,0.1)',\n  ],\n});\nconst getLetterFrequencyColor = scaleOrdinal({\n  domain: letters.map((l) => l.letter),\n  range: [\n    'rgba(93,30,91,1)',\n    'rgba(93,30,91,0.8)',\n    'rgba(93,30,91,0.6)',\n    'rgba(93,30,91,0.4)',\n  ],\n});\n\nconst defaultMargin = { top: 20, right: 20, bottom: 20, left: 20 };\n\nexport type PieProps = {\n  width: number;\n  height: number;\n  margin?: typeof defaultMargin;\n  animate?: boolean;\n};\n\nexport default function Example({\n  width,\n  height,\n  margin = defaultMargin,\n  animate = true,\n}: PieProps) {\n  const [selectedBrowser, setSelectedBrowser] = useState<string | null>(null);\n  const [selectedAlphabetLetter, setSelectedAlphabetLetter] = useState<\n    string | null\n  >(null);\n\n  if (width < 10) return null;\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const radius = Math.min(innerWidth, innerHeight) / 2;\n  const centerY = innerHeight / 2;\n  const centerX = innerWidth / 2;\n  const donutThickness = 50;\n\n  return (\n    <svg width={width} height={height}>\n      <GradientPinkBlue id=\"visx-pie-gradient\" />\n      <rect\n        rx={14}\n        width={width}\n        height={height}\n        fill=\"url('#visx-pie-gradient')\"\n      />\n      <Group top={centerY + margin.top} left={centerX + margin.left}>\n        <Pie\n          data={\n            selectedBrowser\n              ? browsers.filter(({ label }) => label === selectedBrowser)\n              : browsers\n          }\n          pieValue={usage}\n          outerRadius={radius}\n          innerRadius={radius - donutThickness}\n          cornerRadius={3}\n          padAngle={0.005}\n        >\n          {(pie) => (\n            <AnimatedPie<BrowserUsage>\n              {...pie}\n              animate={animate}\n              getKey={(arc) => arc.data.label}\n              onClickDatum={({ data: { label } }) =>\n                animate &&\n                setSelectedBrowser(\n                  selectedBrowser && selectedBrowser === label ? null : label\n                )\n              }\n              getColor={(arc) => getBrowserColor(arc.data.label)}\n            />\n          )}\n        </Pie>\n        <Pie\n          data={\n            selectedAlphabetLetter\n              ? letters.filter(\n                  ({ letter }) => letter === selectedAlphabetLetter\n                )\n              : letters\n          }\n          pieValue={frequency}\n          pieSortValues={() => -1}\n          outerRadius={radius - donutThickness * 1.3}\n        >\n          {(pie) => (\n            <AnimatedPie<LetterFrequency>\n              {...pie}\n              animate={animate}\n              getKey={({ data: { letter } }) => letter}\n              onClickDatum={({ data: { letter } }) =>\n                animate &&\n                setSelectedAlphabetLetter(\n                  selectedAlphabetLetter && selectedAlphabetLetter === letter\n                    ? null\n                    : letter\n                )\n              }\n              getColor={({ data: { letter } }) =>\n                getLetterFrequencyColor(letter)\n              }\n            />\n          )}\n        </Pie>\n      </Group>\n      {animate && (\n        <text\n          textAnchor=\"end\"\n          x={width - 16}\n          y={height - 16}\n          fill=\"white\"\n          fontSize={11}\n          fontWeight={300}\n          pointerEvents=\"none\"\n        >\n          Click segments to update\n        </text>\n      )}\n    </svg>\n  );\n}\n\n// react-spring transition definitions\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\n\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\n  // enter from 360° if end angle is > 180°\n  startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  opacity: 0,\n});\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\n  startAngle,\n  endAngle,\n  opacity: 1,\n});\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n  animate?: boolean;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum: (d: PieArcDatum<Datum>) => void;\n  delay?: number;\n};\n\nfunction AnimatedPie<Datum>({\n  animate,\n  arcs,\n  path,\n  getKey,\n  getColor,\n  onClickDatum,\n}: AnimatedPieProps<Datum>) {\n  const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(arcs, {\n    from: animate ? fromLeaveTransition : enterUpdateTransition,\n    enter: enterUpdateTransition,\n    update: enterUpdateTransition,\n    leave: animate ? fromLeaveTransition : enterUpdateTransition,\n    keys: getKey,\n  });\n  return transitions((props, arc, { key }) => {\n    const [centroidX, centroidY] = path.centroid(arc);\n    const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n\n    return (\n      <g key={key}>\n        <animated.path\n          // compute interpolated path d attribute from intermediate angle values\n          d={interpolate(\n            [props.startAngle, props.endAngle],\n            (startAngle, endAngle) =>\n              path({\n                ...arc,\n                startAngle,\n                endAngle,\n              })\n          )}\n          fill={getColor(arc)}\n          onClick={() => onClickDatum(arc)}\n          onTouchStart={() => onClickDatum(arc)}\n        />\n        {hasSpaceForLabel && (\n          <animated.g style={{ opacity: props.opacity }}>\n            <text\n              fill=\"white\"\n              x={centroidX}\n              y={centroidY}\n              dy=\".33em\"\n              fontSize={9}\n              textAnchor=\"middle\"\n              pointerEvents=\"none\"\n            >\n              {getKey(arc)}\n            </text>\n          </animated.g>\n        )}\n      </g>\n    );\n  });\n}\n","import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { VictoryPie } from 'victory';\nimport { RadialChart } from 'react-vis';\nimport X from './visx';\n\nconst Pie = () => {\n  return (\n    <Grid container>\n      <Grid item>\n        <a\n          href=\"https://formidable.com/open-source/victory/gallery/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          victory\n        </a>\n        <VictoryPie\n          colorScale=\"cool\"\n          data={[\n            { x: 'a', y: 100 },\n            { x: 'b', y: 402 },\n            { x: 'c', y: 525 },\n          ]}\n          innerRadius={100}\n        />\n      </Grid>\n      <Grid item>\n        <a\n          href=\"https://uber.github.io/react-vis/examples/showcases/plots\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          react-vis\n        </a>\n        <RadialChart\n          data={[{ angle: 1 }, { angle: 5 }, { angle: 2 }]}\n          width={300}\n          height={300}\n          innerRadius={100}\n          radius={130}\n        />\n      </Grid>\n      <Grid item>\n        <a\n          href=\"https://airbnb.io/visx/gallery\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          visx\n        </a>\n        <X width={300} height={300} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Pie;\n","import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { VictoryBar, VictoryChart, VictoryTheme } from 'victory';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  XYPlot,\n  VerticalBarSeries,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n} from 'react-vis';\n\nconst useStyles = makeStyles({\n  a: {\n    color: 'red',\n  },\n});\n\nconst Bar = () => {\n  const classes = useStyles();\n  return (\n    <Grid container>\n      <Grid item>\n        <VictoryChart theme={VictoryTheme.material} domainPadding={{ x: 20 }}>\n          <VictoryBar\n            barWidth={({ index }) => Number(index) * 2 + 8}\n            style={{\n              data: { fill: '#c43a31' },\n            }}\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 3 },\n              { x: 3, y: 5 },\n              { x: 4, y: 4 },\n              { x: 5, y: 6 },\n            ]}\n          />\n        </VictoryChart>\n      </Grid>\n      <Grid item>\n        <XYPlot xType=\"ordinal\" width={300} height={300}>\n          <XAxis />\n\n          <YAxis />\n          <HorizontalGridLines />\n          <VerticalBarSeries\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 3 },\n              { x: 3, y: 5 },\n              { x: 4, y: 4 },\n              { x: 5, y: 6 },\n            ]}\n            color=\"#08f\"\n            barWidth={0.7}\n          />\n        </XYPlot>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Bar;\n","import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { VictoryLine, VictoryChart, VictoryTheme } from 'victory';\nimport {\n  XYPlot,\n  LineSeries,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n} from 'react-vis';\n\nconst Lines = () => {\n  return (\n    <Grid container>\n      <Grid item>\n        <VictoryChart theme={VictoryTheme.material}>\n          <VictoryLine\n            style={{\n              data: { stroke: '#c43a31' },\n              parent: { border: '1px solid #ccc' },\n            }}\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 3 },\n              { x: 3, y: 5 },\n              { x: 4, y: 4 },\n              { x: 5, y: 7 },\n            ]}\n          />\n        </VictoryChart>\n      </Grid>\n      <Grid item>\n        <XYPlot xType=\"ordinal\" width={300} height={300}>\n          <XAxis />\n\n          <YAxis />\n          <HorizontalGridLines />\n          <LineSeries\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 3 },\n              { x: 3, y: 5 },\n              { x: 4, y: 4 },\n              { x: 5, y: 6 },\n            ]}\n            color=\"#08f\"\n          />\n        </XYPlot>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Lines;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Pie from './charts/pie';\nimport Bar from './charts/bar';\nimport Line from './charts/line';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      charts\n      <Pie />\n      <Bar />\n      <Line />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as V from 'victory';\nimport 'react-vis/dist/style.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}